#! /usr/local/bin/guile \
--no-auto-compile -e main -s
!#

;;;### this code is dedicated to the public domain

;;;### srfi-1 for fold function
(use-modules ((srfi srfi-1)
	      :renamer (symbol-prefix-proc 'srfi-1:)))

;;;### ice-9 format for advanced format
(use-modules ((ice-9 format)
	      :renamer (symbol-prefix-proc 'ice9-format:)))

;;;### srfi-19 for date functions
(use-modules ((srfi srfi-19)
	     :renamer (symbol-prefix-proc 'srfi-19:)))

;;;#############################################################
;;;#############################################################
;;;### expects 2 julian days (plain numbers)
;;;### differences between 2 julian days is in days (or a fraction of a day)
(define-public (julian-day-difference-to-string dend dstart)
  (define (local-process-sub-day day-fraction)
    (let ((nsecs (* day-fraction 24.0 60.0 60.0))
	  (nmins (truncate (* day-fraction 24.0 60.0)))
	  (nhours (truncate (* day-fraction 24.0))))
      (let ((nminutes
	     (* 0.0010 (truncate (* 1000.0 (- nmins (* nhours 60.0)))))))
	(let ((nseconds
	       (* 0.0010
		  (truncate
		   (* 1000.0 (- nsecs (+ (* nhours 60.0 60.0) (* nminutes 60.0))))))))
	  (begin
	    (if (<= nhours 0.0)
		(if (<= nminutes 0.0)
		    (format #f "~a seconds" nsecs)
		    (format #f "~a minutes, ~a seconds" nminutes nseconds))
		(if (<= nminutes 0.0)
		    (format #f "~a hours, ~a seconds" nhours nseconds)
		    (format #f "~a hours, ~a minutes, ~a seconds" nhours nminutes nseconds))
		))))))
  (if (and (number? dend) (number? dstart))
      (begin
	(let ((jd-diff (exact->inexact (- dend dstart))))
	  (if (< jd-diff 1.0)
	      (begin
		(let ((tstring (local-process-sub-day jd-diff)))
		  tstring
		  ))
	      (begin
		(let ((ndays (truncate jd-diff)))
		  (let ((dfract-diff (- jd-diff ndays)))
		    (let ((tstring (local-process-sub-day dfract-diff)))
		      (let ((ttstring (format #f "~a days, ~a" ndays tstring)))
			ttstring
			))))))))
      #f))

;;;#############################################################
;;;#############################################################
(define-public (date-time-to-string this-datetime)
  (if (srfi-19:date? this-datetime)
      (begin
	(let ((s1 (srfi-19:date->string this-datetime "~A, ~B ~d, ~Y"))
	      (s2 (string-downcase (srfi-19:date->string this-datetime "~I:~M:~S ~p"))))
	  (format #f "~a, ~a" s1 s2)))
      #f))

;;;#############################################################
;;;#############################################################
(define (split-digits-list this-num)
  (define (local-loop this-num acc-list)
    (cond
     ((< this-num 0) acc-list)
     ((< this-num 10) (cons this-num acc-list))
     (else
      (let ((next-num 0)
	    (this-digit 0))
	(begin
	  (call-with-values (lambda() (euclidean/ this-num 10))
	    (lambda (a b)
	      (begin
		(set! next-num a)
		(set! this-digit b))))
	  (local-loop next-num (cons this-digit acc-list))
	  )))))
  (let ((result-list (local-loop this-num (list))))
    (begin
      result-list
      )))

;;;#############################################################
;;;#############################################################
(define (test-split-digits-list-1)
  (let ((sub-name "test-split-digits-list-1")
	(test-list
	 (list
	  (list 3 (list 3)) (list 4 (list 4)) (list 5 (list 5))
	  (list 13 (list 1 3)) (list 14 (list 1 4)) (list 15 (list 1 5))
	  (list 23 (list 2 3)) (list 24 (list 2 4)) (list 25 (list 2 5))
	  (list 123 (list 1 2 3)) (list 1234 (list 1 2 3 4)) (list 98765 (list 9 8 7 6 5))
	  (list 341608987 (list 3 4 1 6 0 8 9 8 7))
	  (list 116696699999166169 (list 1 1 6 6 9 6 6 9 9 9 9 9 1 6 6 1 6 9))
	  ))
	(test-label-index 0))
    (begin
      (for-each
       (lambda (alist)
	 (begin
	   (let ((test-num (list-ref alist 0))
		 (shouldbe-list (list-ref alist 1)))
	     (let ((result-list (split-digits-list test-num)))
	       (begin
		 (if (not (equal? shouldbe-list result-list))
		     (begin
		       (display (format #f "~a : error (~a) : number = ~a, list shouldbe = ~a, result list = ~a~%"
					sub-name test-label-index test-num
					shouldbe-list result-list))
		       (quit)
		       ))
		 )))
	   (set! test-label-index (1+ test-label-index))
	   ))
       test-list)
      )))

;;;#############################################################
;;;#############################################################
(define (main-loop num-list top-digits)
  (let ((sum-result (srfi-1:fold + 0 num-list))
	(ncount (length num-list)))
    (let ((dlist (split-digits-list sum-result)))
      (let ((ndigits (length dlist)))
	(begin
	  (do ((ii 0 (+ ii 1)))
	      ((>= ii ncount))
	    (begin
	      (let ((tnum (list-ref num-list ii)))
		(if (equal? ii 0)
		    (begin
		      (display (ice9-format:format #f "  ~:d~%" tnum)))
		    (begin
		      (display (ice9-format:format #f " + ~:d~%" tnum))
		      )))
	      ))
	  (display (ice9-format:format #f "  = ~:d, number of digits = ~:d~%"
				       sum-result ndigits))
	  (display (ice9-format:format #f "first ~:d digits of the sum is ~a~%"
				       top-digits (list-head dlist top-digits)))
	  (force-output)
	  ))
      )))

;;;#############################################################
;;;#############################################################
;;; define a macro to simplify code
(define-syntax run-test
  (syntax-rules ()
    ((run-test test-function counter)
     (begin
       (test-function)
       (set! counter (1+ counter))
       ))
    ))

;;;#############################################################
;;;#############################################################
(define-syntax time-code
  (syntax-rules ()
    ((time-code body)
     (begin
       (let ((start-jday (srfi-19:current-julian-day)))
	 (begin
	   body

	   (let ((end-jday (srfi-19:current-julian-day)))
	     (begin
	       (display (format #f "elapsed time = ~a : ~a~%"
				(julian-day-difference-to-string end-jday start-jday)
				(date-time-to-string (srfi-19:current-date))))
	       (force-output)
	       ))
	   ))
       ))
    ))

;;;#############################################################
;;;#############################################################
(define (main args)
  (begin
    (display (format #f "Problem 013 - Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.~%"))
    (display (format #f "see also http://en.wikipedia.org/wiki/Arbitrary-precision_arithmetic~%"))
    (display (format #f "and for c/c++ http://gmplib.org/~%"))
    (newline)

    ;;; run tests
    (display (format #f "running tests...~%"))
    (let ((counter 0))
      (begin
	(time-code
	 (begin
	   (run-test test-split-digits-list-1 counter)

	   (display (ice9-format:format #f "~:d tests completed~%" counter))
	   ))
	))

    (display (format #f "Output:~%"))
    (force-output)


    (let ((num-list
	   (list
	    37107287533902102798797998220837590246510135740250
	    46376937677490009712648124896970078050417018260538
	    74324986199524741059474233309513058123726617309629
	    91942213363574161572522430563301811072406154908250
	    23067588207539346171171980310421047513778063246676
	    89261670696623633820136378418383684178734361726757
	    28112879812849979408065481931592621691275889832738
	    44274228917432520321923589422876796487670272189318
	    47451445736001306439091167216856844588711603153276
	    70386486105843025439939619828917593665686757934951
	    62176457141856560629502157223196586755079324193331
	    64906352462741904929101432445813822663347944758178
	    92575867718337217661963751590579239728245598838407
	    58203565325359399008402633568948830189458628227828
	    80181199384826282014278194139940567587151170094390
	    35398664372827112653829987240784473053190104293586
	    86515506006295864861532075273371959191420517255829
	    71693888707715466499115593487603532921714970056938
	    54370070576826684624621495650076471787294438377604
	    53282654108756828443191190634694037855217779295145
	    36123272525000296071075082563815656710885258350721
	    45876576172410976447339110607218265236877223636045
	    17423706905851860660448207621209813287860733969412
	    81142660418086830619328460811191061556940512689692
	    51934325451728388641918047049293215058642563049483
	    62467221648435076201727918039944693004732956340691
	    15732444386908125794514089057706229429197107928209
	    55037687525678773091862540744969844508330393682126
	    18336384825330154686196124348767681297534375946515
	    80386287592878490201521685554828717201219257766954
	    78182833757993103614740356856449095527097864797581
	    16726320100436897842553539920931837441497806860984
	    48403098129077791799088218795327364475675590848030
	    87086987551392711854517078544161852424320693150332
	    59959406895756536782107074926966537676326235447210
	    69793950679652694742597709739166693763042633987085
	    41052684708299085211399427365734116182760315001271
	    65378607361501080857009149939512557028198746004375
	    35829035317434717326932123578154982629742552737307
	    94953759765105305946966067683156574377167401875275
	    88902802571733229619176668713819931811048770190271
	    25267680276078003013678680992525463401061632866526
	    36270218540497705585629946580636237993140746255962
	    24074486908231174977792365466257246923322810917141
	    91430288197103288597806669760892938638285025333403
	    34413065578016127815921815005561868836468420090470
	    23053081172816430487623791969842487255036638784583
	    11487696932154902810424020138335124462181441773470
	    63783299490636259666498587618221225225512486764533
	    67720186971698544312419572409913959008952310058822
	    95548255300263520781532296796249481641953868218774
	    76085327132285723110424803456124867697064507995236
	    37774242535411291684276865538926205024910326572967
	    23701913275725675285653248258265463092207058596522
	    29798860272258331913126375147341994889534765745501
	    18495701454879288984856827726077713721403798879715
	    38298203783031473527721580348144513491373226651381
	    34829543829199918180278916522431027392251122869539
	    40957953066405232632538044100059654939159879593635
	    29746152185502371307642255121183693803580388584903
	    41698116222072977186158236678424689157993532961922
	    62467957194401269043877107275048102390895523597457
	    23189706772547915061505504953922979530901129967519
	    86188088225875314529584099251203829009407770775672
	    11306739708304724483816533873502340845647058077308
	    82959174767140363198008187129011875491310547126581
	    97623331044818386269515456334926366572897563400500
	    42846280183517070527831839425882145521227251250327
	    55121603546981200581762165212827652751691296897789
	    32238195734329339946437501907836945765883352399886
	    75506164965184775180738168837861091527357929701337
	    62177842752192623401942399639168044983993173312731
	    32924185707147349566916674687634660915035914677504
	    99518671430235219628894890102423325116913619626622
	    73267460800591547471830798392868535206946944540724
	    76841822524674417161514036427982273348055556214818
	    97142617910342598647204516893989422179826088076852
	    87783646182799346313767754307809363333018982642090
	    10848802521674670883215120185883543223812876952786
	    71329612474782464538636993009049310363619763878039
	    62184073572399794223406235393808339651327408011116
	    66627891981488087797941876876144230030984490851411
	    60661826293682836764744779239180335110989069790714
	    85786944089552990653640447425576083659976645795096
	    66024396409905389607120198219976047599490197230297
	    64913982680032973156037120041377903785566085089252
	    16730939319872750275468906903707539413042652315011
	    94809377245048795150954100921645863754710598436791
	    78639167021187492431995700641917969777599028300699
	    15368713711936614952811305876380278410754449733078
	    40789923115535562561142322423255033685442488917353
	    44889911501440648020369068063960672322193204149535
	    41503128880339536053299340368006977710650566631954
	    81234880673210146739058568557934581403627822703280
	    82616570773948327592232845941706525094512325230608
	    22918802058777319719839450180888072429661980811197
	    77158542502016545090413245809786882778948721859617
	    72107838435069186155435662884062257473692284509516
	    20849603980134001723930671666823555245252804609722
	    53503534226472524250874054075591789781264330331690
	    ))
	  (top-digits 10))
      (begin
	(main-loop num-list top-digits)
	))

    (newline)
    (force-output)
    ))
